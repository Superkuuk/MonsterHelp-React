{"ast":null,"code":"var _jsxFileName = \"/Users/rutger/Desktop/DnD/DnD Toolies/MonsterAI/MonsterHelp-React/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport StatBlock from './Statblock.js';\nimport Autocomplete from \"./Autocomplete.js\";\nconst Bestiary = 'https://raw.githubusercontent.com/TheGiddyLimit/TheGiddyLimit.github.io/master/data/bestiary/bestiary-mm.json';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      search: \"\",\n      isLoaded: false\n    };\n  } // Read XML data of monsters,\n\n\n  componentDidMount() {\n    fetch(Bestiary).then(function (response) {\n      if (response.status !== 200) {\n        console.log('Looks like there was a problem. Status Code: ' + response.status);\n        return;\n      } // Examine the text in the response\n\n\n      response.json().then(function (data) {\n        data = data.monster;\n        console.log(data);\n        data = addID(data);\n        this.setState({\n          data: data,\n          search: \"Ancient Red Dragon\",\n          isLoaded: true\n        });\n      });\n    }).catch(function (err) {\n      console.log('Fetch Error :-S', err);\n    });\n    fetch(Bestiary).then(response => response.json()).then(res => addID(res));\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }\n      }, \"Loading...\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Search, {\n        monsterList: createMonsterList(this.state.data),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(StatBlock, {\n        monster: getMonsterByName(this.state.data, this.state.search),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n}\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      monsterList: this.props.monsterList\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      autoComplete: \"off\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"myInput\",\n      type: \"text\",\n      placeholder: \"Monster\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Autocomplete, {\n      suggestions: Object.keys(this.state.monsterList),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    })));\n  }\n\n} // Add an index to all monsters\n\n\nfunction addID(d) {\n  d = d.monster; // Search for given monster\n\n  for (var i = 0; i < d.length; i++) {\n    d[i].id = i;\n  }\n\n  return d;\n} // Given the data and a name, get all data of the monster\n\n\nfunction getMonsterByName(d, m) {\n  var monster;\n\n  for (var i = 0; i < d.length; i++) {\n    if (d[i].name === m) {\n      monster = d[i];\n    }\n  }\n\n  return monster;\n} // Given the data and an id, get all data of the monster\n\n\nfunction getMonsterById(d, id) {\n  return d[id];\n} // Creates an array of the nameList monsters\n\n\nfunction createMonsterList(d) {\n  return Object.keys(d);\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Main, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 3\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/rutger/Desktop/DnD/DnD Toolies/MonsterAI/MonsterHelp-React/src/index.js"],"names":["React","ReactDOM","StatBlock","Autocomplete","Bestiary","Main","Component","constructor","props","state","data","search","isLoaded","componentDidMount","fetch","then","response","status","console","log","json","monster","addID","setState","catch","err","res","render","createMonsterList","getMonsterByName","Search","value","monsterList","handleChange","bind","handleSubmit","event","target","alert","preventDefault","Object","keys","d","i","length","id","m","name","getMonsterById","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport StatBlock from './Statblock.js';\nimport Autocomplete from \"./Autocomplete.js\";\nconst Bestiary = 'https://raw.githubusercontent.com/TheGiddyLimit/TheGiddyLimit.github.io/master/data/bestiary/bestiary-mm.json';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      search: \"\",\n      isLoaded: false,\n    };\n  }\n\n  // Read XML data of monsters,\n  componentDidMount() {\n    fetch(Bestiary)\n      .then(\n      function(response) {\n        if (response.status !== 200) {\n          console.log('Looks like there was a problem. Status Code: ' +\n            response.status);\n          return;\n        }\n\n        // Examine the text in the response\n        response.json().then(function(data) {\n          data = data.monster;\n          console.log(data);\n          data = addID(data);\n          this.setState({\n            data: data,\n            search: \"Ancient Red Dragon\",\n            isLoaded: true,\n          });\n        });\n      })\n      .catch(function(err) {\n      console.log('Fetch Error :-S', err);\n    });\n\n    fetch(Bestiary)\n    .then(response => response.json())\n    .then(res => addID(res))\n\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (<div>Loading...</div>);\n    } else {\n      return (\n        <div>\n          <Search monsterList={createMonsterList(this.state.data)} />\n          <StatBlock monster={getMonsterByName(this.state.data, this.state.search)}/>\n        </div>\n      );\n    }\n  }\n}\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      monsterList: this.props.monsterList,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"Search\">\n        <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n          <div className=\"autocomplete\">\n            <input id=\"myInput\" type=\"text\" placeholder=\"Monster\" value={this.state.value} onChange={this.handleChange} />\n            <Autocomplete suggestions={Object.keys(this.state.monsterList)} />\n          </div>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\n\n// Add an index to all monsters\nfunction addID(d) {\n  d = d.monster;\n  // Search for given monster\n  for (var i = 0; i < d.length; i++) {\n    d[i].id = i;\n  }\n  return d;\n}\n\n// Given the data and a name, get all data of the monster\nfunction getMonsterByName(d, m) {\n  var monster;\n  for (var i = 0; i < d.length; i++) {\n    if (d[i].name === m) {\n      monster = d[i];\n    }\n  }\n  return monster;\n}\n\n// Given the data and an id, get all data of the monster\nfunction getMonsterById(d, id) {\n  return d[id];\n}\n\n// Creates an array of the nameList monsters\nfunction createMonsterList(d) {\n\n  return Object.keys(d);\n}\n\n\n// ========================================\n\nReactDOM.render(\n  <Main />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}