{"ast":null,"code":"var _jsxFileName = \"/Users/rutger/Desktop/DnD/DnD Toolies/MonsterAI/MonsterHelp-React/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport StatBlock from './Statblock.js';\nimport Autocomplete from \"./Autocomplete.js\";\nconst Bestiary = 'https://raw.githubusercontent.com/TheGiddyLimit/TheGiddyLimit.github.io/master/data/bestiary/bestiary-mm.json';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      search: \"\",\n      isLoaded: false\n    };\n  } // Read JSON data of monsters from given bestiary\n\n\n  componentDidMount() {\n    fetch(Bestiary).then(response => response.json()).then(res => addID(res)).then(data => {\n      this.setState({\n        data: data,\n        search: \"Aarakocra\",\n        isLoaded: true\n      });\n    });\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }\n      }, \"Loading...\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Search, {\n        monsterList: createMonsterList(this.state.data),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(StatBlock, {\n        monster: getMonsterByName(this.state.data, this.state.search),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n}\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      monsterList: this.props.monsterList\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      autoComplete: \"off\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"myInput\",\n      type: \"text\",\n      placeholder: \"Monster\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Autocomplete, {\n      suggestions: this.state.monsterList,\n      placeholder: \"Monster\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    })));\n  }\n\n} // Add an index to all monsters\n\n\nfunction addID(d) {\n  d = d.monster; // Search for given monster\n\n  for (var i = 0; i < d.length; i++) {\n    d[i].id = i;\n  }\n\n  console.log(d);\n  return d;\n} // Given the data and a name, get all data of the monster\n\n\nfunction getMonsterByName(d, m) {\n  var monster;\n\n  for (var i = 0; i < d.length; i++) {\n    if (d[i].name === m) {\n      monster = d[i];\n    }\n  }\n\n  return monster;\n} // Given the data and an id, get all data of the monster\n\n\nfunction getMonsterById(d, id) {\n  return d[id];\n} // Creates an array of the monster names\n\n\nfunction createMonsterList(d) {\n  return d.map(m => m.name);\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Main, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 3\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/rutger/Desktop/DnD/DnD Toolies/MonsterAI/MonsterHelp-React/src/index.js"],"names":["React","ReactDOM","StatBlock","Autocomplete","Bestiary","Main","Component","constructor","props","state","data","search","isLoaded","componentDidMount","fetch","then","response","json","res","addID","setState","render","createMonsterList","getMonsterByName","Search","value","monsterList","handleChange","bind","handleSubmit","event","target","alert","preventDefault","d","monster","i","length","id","console","log","m","name","getMonsterById","map","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport StatBlock from './Statblock.js';\nimport Autocomplete from \"./Autocomplete.js\";\nconst Bestiary = 'https://raw.githubusercontent.com/TheGiddyLimit/TheGiddyLimit.github.io/master/data/bestiary/bestiary-mm.json';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      search: \"\",\n      isLoaded: false,\n    };\n  }\n\n  // Read JSON data of monsters from given bestiary\n  componentDidMount() {\n    fetch(Bestiary)\n    .then(response => response.json())\n    .then(res => addID(res))\n    .then(data => {\n      this.setState({\n        data: data,\n        search: \"Aarakocra\",\n        isLoaded: true,\n      })\n    });\n\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (<div>Loading...</div>);\n    } else {\n      return (\n        <div>\n          <Search monsterList={createMonsterList(this.state.data)} />\n          <StatBlock monster={getMonsterByName(this.state.data, this.state.search)}/>\n        </div>\n      );\n    }\n  }\n}\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      monsterList: this.props.monsterList,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"Search\">\n        <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n          <div className=\"autocomplete\">\n            <input id=\"myInput\" type=\"text\" placeholder=\"Monster\" value={this.state.value} onChange={this.handleChange} />\n            <Autocomplete suggestions={this.state.monsterList} placeholder=\"Monster\" />\n          </div>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\n\n// Add an index to all monsters\nfunction addID(d) {\n  d = d.monster;\n  // Search for given monster\n  for (var i = 0; i < d.length; i++) {\n    d[i].id = i;\n  }\n  console.log(d);\n  return d;\n}\n\n// Given the data and a name, get all data of the monster\nfunction getMonsterByName(d, m) {\n  var monster;\n  for (var i = 0; i < d.length; i++) {\n    if (d[i].name === m) {\n      monster = d[i];\n    }\n  }\n  return monster;\n}\n\n// Given the data and an id, get all data of the monster\nfunction getMonsterById(d, id) {\n  return d[id];\n}\n\n// Creates an array of the monster names\nfunction createMonsterList(d) {\n  return d.map(m => m.name);\n}\n\n\n// ========================================\n\nReactDOM.render(\n  <Main />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}