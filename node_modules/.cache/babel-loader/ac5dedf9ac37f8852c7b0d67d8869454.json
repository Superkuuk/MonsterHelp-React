{"ast":null,"code":"var _jsxFileName = \"/Users/rutger/Desktop/DnD/DnD Toolies/MonsterAI/MonsterHelp-React/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport StatBlock from './Statblock.js';\nimport xmlData from './MMBestiary.xml';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monster: {},\n      search: this.props.name,\n      isLoaded: false\n    };\n  } // Read XML data of monsters, search for given monster and update state with found data\n\n\n  componentDidMount() {\n    fetch(xmlData).then(response => response.text()).then(res => structureData(res, this.state.search)).then(data => {\n      this.setState({\n        monster: data,\n        isLoaded: true\n      });\n    });\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }\n      }, \"Loading...\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Search, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(StatBlock, {\n        name: \"Ancient Red Dragon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n}\n\nfunction Search(props) {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }\n  }, \"test\");\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Main, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 3\n  }\n}), document.getElementById('root')); // Search the given monster m in the xml-data d.\n\nfunction structureData(d) {\n  d = new window.DOMParser().parseFromString(d, \"text/xml\");\n  d = Array.from(d.getElementsByTagName(\"monster\"));\n  var monsterNames = []; // Search for given monster\n\n  for (var i = 0; d.length; i++) {\n    monsterNames[d[i].getElementsByTagName(\"name\")[0].childNodes[0].nodeValue] = i;\n  }\n\n  return {\n    dom: d,\n    nameList: monsterNames\n  };\n}","map":{"version":3,"sources":["/Users/rutger/Desktop/DnD/DnD Toolies/MonsterAI/MonsterHelp-React/src/index.js"],"names":["React","ReactDOM","StatBlock","xmlData","Main","Component","constructor","props","state","monster","search","name","isLoaded","componentDidMount","fetch","then","response","text","res","structureData","data","setState","render","Search","document","getElementById","d","window","DOMParser","parseFromString","Array","from","getElementsByTagName","monsterNames","i","length","childNodes","nodeValue","dom","nameList"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,cAAP;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;AAEA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,MAAM,EAAE,KAAKH,KAAL,CAAWI,IAFR;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKD,GARgC,CAUjC;;;AACAC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAACX,OAAD,CAAL,CACCY,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,GAAG,IAAIC,aAAa,CAACD,GAAD,EAAM,KAAKV,KAAL,CAAWE,MAAjB,CAF1B,EAGCK,IAHD,CAGMK,IAAI,IAAI;AACZ,WAAKC,QAAL,CAAc;AACZZ,QAAAA,OAAO,EAAEW,IADG;AAEZR,QAAAA,QAAQ,EAAE;AAFE,OAAd;AAGG,KAPL;AASD;;AAGDU,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKd,KAAL,CAAWI,QAAhB,EAA0B;AACxB,0BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAR;AACD,KAFD,MAEO;AACL,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,SAAD;AAAW,QAAA,IAAI,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD;AACF;;AAnCgC;;AAsCnC,SAASW,MAAT,CAAgBhB,KAAhB,EAAuB;AACrB,sBAAO;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,C,CAED;;;AAEAN,QAAQ,CAACqB,MAAT,eACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEEE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF,E,CAKA;;AACA,SAASN,aAAT,CAAuBO,CAAvB,EAA0B;AACxBA,EAAAA,CAAC,GAAI,IAAIC,MAAM,CAACC,SAAX,EAAD,CAAyBC,eAAzB,CAAyCH,CAAzC,EAA4C,UAA5C,CAAJ;AACAA,EAAAA,CAAC,GAAGI,KAAK,CAACC,IAAN,CAAWL,CAAC,CAACM,oBAAF,CAAuB,SAAvB,CAAX,CAAJ;AACA,MAAIC,YAAY,GAAG,EAAnB,CAHwB,CAIxB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBR,CAAC,CAACS,MAAlB,EAA0BD,CAAC,EAA3B,EAA+B;AAC7BD,IAAAA,YAAY,CAACP,CAAC,CAACQ,CAAD,CAAD,CAAKF,oBAAL,CAA0B,MAA1B,EAAkC,CAAlC,EAAqCI,UAArC,CAAgD,CAAhD,EAAmDC,SAApD,CAAZ,GAA6EH,CAA7E;AACD;;AAED,SAAO;AAACI,IAAAA,GAAG,EAAEZ,CAAN;AAASa,IAAAA,QAAQ,EAAEN;AAAnB,GAAP;AACD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport StatBlock from './Statblock.js';\nimport xmlData from './MMBestiary.xml';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monster: {},\n      search: this.props.name,\n      isLoaded: false,\n    };\n  }\n\n  // Read XML data of monsters, search for given monster and update state with found data\n  componentDidMount() {\n    fetch(xmlData)\n    .then(response => response.text())\n    .then(res => structureData(res, this.state.search))\n    .then(data => {\n      this.setState({\n        monster: data,\n        isLoaded: true,\n      })}\n    );\n  }\n\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (<div>Loading...</div>);\n    } else {\n      return (\n        <div>\n          <Search />\n          <StatBlock name=\"Ancient Red Dragon\"/>\n        </div>\n      );\n    }\n  }\n}\n\nfunction Search(props) {\n  return <div className=\"Search\">test</div>;\n}\n\n// ========================================\n\nReactDOM.render(\n  <Main />,\n  document.getElementById('root')\n);\n\n// Search the given monster m in the xml-data d.\nfunction structureData(d) {\n  d = (new window.DOMParser()).parseFromString(d, \"text/xml\");\n  d = Array.from(d.getElementsByTagName(\"monster\"));\n  var monsterNames = [];\n  // Search for given monster\n  for (var i = 0; d.length; i++) {\n    monsterNames[d[i].getElementsByTagName(\"name\")[0].childNodes[0].nodeValue] = i;\n  }\n\n  return {dom: d, nameList: monsterNames};\n}\n"]},"metadata":{},"sourceType":"module"}