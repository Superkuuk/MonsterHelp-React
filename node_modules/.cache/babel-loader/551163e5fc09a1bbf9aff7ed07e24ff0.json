{"ast":null,"code":"var _jsxFileName = \"/Users/rutger/Desktop/DnD/DnD Toolies/MonsterAI/MonsterHelp-React/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport StatBlock from './Statblock.js';\nimport xmlData from './MMBestiary.xml';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dom: [],\n      monsterList: [],\n      isLoaded: false\n    };\n  } // Read XML data of monsters,\n\n\n  componentDidMount() {\n    fetch(xmlData).then(response => response.text()).then(res => structureData(res)).then(data => {\n      this.setState({\n        dom: data.dom,\n        monsterList: data.nameList,\n        search: \"Skeleton\",\n        isLoaded: true\n      });\n    });\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }\n      }, \"Loading...\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Search, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(StatBlock, {\n        monster: getMonster(this.state.dom, this.state.monsterList, this.state.search),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n}\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n    console.log(event.target.value);\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, \"Monster:\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    })));\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Main, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 3\n  }\n}), document.getElementById('root')); // Create JS friendly dom, and include a list of all names of monsters\n\nfunction structureData(d) {\n  d = new window.DOMParser().parseFromString(d, \"text/xml\");\n  d = Array.from(d.getElementsByTagName(\"monster\"));\n  var monsterNames = {}; // Search for given monster\n\n  for (var i = 0; i < d.length; i++) {\n    monsterNames[d[i].getElementsByTagName(\"name\")[0].childNodes[0].nodeValue] = i;\n  }\n\n  return {\n    dom: d,\n    nameList: monsterNames\n  };\n} // Given the DOM, nameList (map) and a name, get all data of the monster (in XML DOM format)\n\n\nfunction getMonster(d, nl, m) {\n  return d[nl[m]];\n}","map":{"version":3,"sources":["/Users/rutger/Desktop/DnD/DnD Toolies/MonsterAI/MonsterHelp-React/src/index.js"],"names":["React","ReactDOM","StatBlock","xmlData","Main","Component","constructor","props","state","dom","monsterList","isLoaded","componentDidMount","fetch","then","response","text","res","structureData","data","setState","nameList","search","render","getMonster","Search","value","handleChange","bind","handleSubmit","event","target","console","log","alert","preventDefault","document","getElementById","d","window","DOMParser","parseFromString","Array","from","getElementsByTagName","monsterNames","i","length","childNodes","nodeValue","nl","m"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport StatBlock from './Statblock.js';\nimport xmlData from './MMBestiary.xml';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dom: [],\n      monsterList: [],\n      isLoaded: false,\n    };\n  }\n\n  // Read XML data of monsters,\n  componentDidMount() {\n    fetch(xmlData)\n    .then(response => response.text())\n    .then(res => structureData(res))\n    .then(data => {\n      this.setState({\n        dom: data.dom,\n        monsterList: data.nameList,\n        search: \"Skeleton\",\n        isLoaded: true,\n      })}\n    );\n  }\n\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (<div>Loading...</div>);\n    } else {\n      return (\n        <div>\n          <Search />\n          <StatBlock monster={getMonster(this.state.dom, this.state.monsterList, this.state.search)}/>\n        </div>\n      );\n    }\n  }\n}\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n    console.log(event.target.value);\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"Search\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Monster:\n            <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Main />,\n  document.getElementById('root')\n);\n\n// Create JS friendly dom, and include a list of all names of monsters\nfunction structureData(d) {\n  d = (new window.DOMParser()).parseFromString(d, \"text/xml\");\n  d = Array.from(d.getElementsByTagName(\"monster\"));\n  var monsterNames = {};\n  // Search for given monster\n  for (var i = 0; i < d.length; i++) {\n    monsterNames[d[i].getElementsByTagName(\"name\")[0].childNodes[0].nodeValue] = i;\n  }\n  return {dom: d, nameList: monsterNames};\n}\n\n// Given the DOM, nameList (map) and a name, get all data of the monster (in XML DOM format)\nfunction getMonster(d, nl, m) {\n  return d[nl[m]];\n}\n"]},"metadata":{},"sourceType":"module"}