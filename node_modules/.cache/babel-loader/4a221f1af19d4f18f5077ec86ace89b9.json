{"ast":null,"code":"var _jsxFileName = \"/Users/rutger/Desktop/DnD/DnD Toolies/MonsterAI/MonsterHelp-React/src/Autocomplete.js\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1); // Update the user input and filtered suggestions, reset the active\n      // suggestion and make sure the suggestions are shown\n\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n      this.props.onChange(userInput);\n    };\n\n    this.onClick = e => {\n      // Update the user input and reset the rest of the state\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n      this.props.onChange(e.currentTarget.innerText);\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeSuggestion,\n        filteredSuggestions\n      } = this.state; // User pressed the enter key, update the input and close the\n      // suggestions\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n        this.props.onChange(filteredSuggestions[activeSuggestion]);\n      } // User pressed the up arrow, decrement the index\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow, increment the index\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    };\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\",\n      placeholder: this.props.placeholder\n    };\n  } // Event fired when the input value is changed\n\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"suggestions\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }\n        }, filteredSuggestions.map((suggestion, index) => {\n          let className; // Flag the active suggestion with a class\n\n          if (index === activeSuggestion) {\n            className = \"suggestion-active\";\n          }\n\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: className,\n            key: suggestion,\n            onClick: onClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }\n          }, suggestion);\n        }));\n      } else {\n        suggestionsListComponent = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"no-suggestions\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"em\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }\n        }, \"No suggestions, you're on your own!\"));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: userInput,\n      placeholder: this.state.placeholder,\n      autocomplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }), suggestionsListComponent);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/rutger/Desktop/DnD/DnD Toolies/MonsterAI/MonsterHelp-React/src/Autocomplete.js"],"names":["React","Component","Fragment","PropTypes","Autocomplete","constructor","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","onKeyDown","state","keyCode","length","placeholder","render","suggestionsListComponent","map","index","className","propTypes","instanceOf","Array","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Autocomplete extends Component {\n  static propTypes = {\n    suggestions: PropTypes.instanceOf(Array)\n  };\n\n  static defaultProps = {\n    suggestions: []\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\",\n      placeholder: this.props.placeholder,\n    };\n  }\n\n  // Event fired when the input value is changed\n  onChange = e => {\n    const { suggestions } = this.props;\n    const userInput = e.currentTarget.value;\n\n    // Filter our suggestions that don't contain the user's input\n    const filteredSuggestions = suggestions.filter(\n      suggestion =>\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    // Update the user input and filtered suggestions, reset the active\n    // suggestion and make sure the suggestions are shown\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions,\n      showSuggestions: true,\n      userInput: e.currentTarget.value\n    });\n    this.props.onChange(userInput);\n  };\n\n  // Event fired when the user clicks on a suggestion\n  onClick = e => {\n    // Update the user input and reset the rest of the state\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText\n    });\n    this.props.onChange(e.currentTarget.innerText);\n  };\n\n  // Event fired when the user presses a key down\n  onKeyDown = e => {\n    const { activeSuggestion, filteredSuggestions } = this.state;\n\n    // User pressed the enter key, update the input and close the\n    // suggestions\n    if (e.keyCode === 13) {\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: filteredSuggestions[activeSuggestion]\n      });\n      this.props.onChange(filteredSuggestions[activeSuggestion]);\n    }\n    // User pressed the up arrow, decrement the index\n    else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\n    }\n    // User pressed the down arrow, increment the index\n    else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\n    }\n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = (\n          <ul className=\"suggestions\">\n            {filteredSuggestions.map((suggestion, index) => {\n              let className;\n\n              // Flag the active suggestion with a class\n              if (index === activeSuggestion) {\n                className = \"suggestion-active\";\n              }\n\n              return (\n                <li\n                  className={className}\n                  key={suggestion}\n                  onClick={onClick}\n                >\n                  {suggestion}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      } else {\n        suggestionsListComponent = (\n          <div className=\"no-suggestions\">\n            <em>No suggestions, you're on your own!</em>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <Fragment>\n        <input\n          type=\"text\"\n          onChange={onChange}\n          onKeyDown={onKeyDown}\n          value={userInput}\n          placeholder={this.state.placeholder}\n          autocomplete=\"off\"\n        />\n        {suggestionsListComponent}\n      </Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}